package ch.bfh.cas.mad.tasktimetrackerapp.activities

import android.os.Bundle
import android.widget.ArrayAdapter
import android.widget.AutoCompleteTextView
import android.widget.Button
import android.widget.EditText
import androidx.activity.ComponentActivity
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.lifecycleScope
import ch.bfh.cas.mad.tasktimetrackerapp.R
import ch.bfh.cas.mad.tasktimetrackerapp.persistence.Entry
import ch.bfh.cas.mad.tasktimetrackerapp.persistence.EntryRepository
import ch.bfh.cas.mad.tasktimetrackerapp.persistence.TTTDatabaseProvider
import ch.bfh.cas.mad.tasktimetrackerapp.persistence.Task
import ch.bfh.cas.mad.tasktimetrackerapp.persistence.TaskRepository
import ch.bfh.cas.mad.tasktimetrackerapp.viewModel.AddEntryViewModel
import ch.bfh.cas.mad.tasktimetrackerapp.viewModel.AddEntryViewModelFactory
import ch.bfh.cas.mad.tasktimetrackerapp.viewModel.TaskOverviewViewModel
import ch.bfh.cas.mad.tasktimetrackerapp.viewModel.TaskOverviewViewModelFactory
import com.google.android.material.floatingactionbutton.FloatingActionButton
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.launch

class AddEntryActivity : ComponentActivity() {

    private lateinit var viewModel: AddEntryViewModel
    private lateinit var taskViewModel: TaskOverviewViewModel
    private lateinit var addEntryButton: Button
    private lateinit var taskName: AutoCompleteTextView
    private lateinit var backButton: FloatingActionButton
    private lateinit var task: Task

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_addentry)

        val viewModelProvider = ViewModelProvider(
            this,
            AddEntryViewModelFactory(EntryRepository(TTTDatabaseProvider.get(this).getEntryDao()))
        )

        val taskViewModelProvider = ViewModelProvider(
            this,
            TaskOverviewViewModelFactory(TaskRepository(TTTDatabaseProvider.get(this).getTaskDao(), TTTDatabaseProvider.get(this).getEntryDao()))
        )

        viewModel = viewModelProvider[AddEntryViewModel::class.java]
        taskViewModel = taskViewModelProvider[TaskOverviewViewModel::class.java]

        addEntryButton = findViewById(R.id.addEntryButton)
        backButton = findViewById(R.id.fabBack)

        taskName = findViewById(R.id.taskName)

        // getAllTasks
        lifecycleScope.launch {
            taskViewModel.tasks.collectLatest { tasks ->
                val adapter = ArrayAdapter(this@AddEntryActivity, android.R.layout.simple_dropdown_item_1line, tasks)
                taskName.setAdapter(adapter)
            }
        }

        taskName.setOnItemClickListener{ parent, _, position, _ ->
            val item = parent.getItemAtPosition(position)
            if (item is Task) {
                val task: Task = item
                this@AddEntryActivity.task = task
            }
        }

        addEntryButton.setOnClickListener {
            val entryDescription = findViewById<EditText>(R.id.entryDescription).text.toString()    // ToDo: check for empty string, then try to to have a default value from entity
            val entry = Entry(0, entryDescription, task.id, System.currentTimeMillis())   // id for entry is autoGenerated
            viewModel.addEntry(entry)
            finish()
        }

        backButton.setOnClickListener {
            finish()
        }
    }

    override fun onResume() {
        super.onResume()
        taskViewModel.getAllTasks()
    }
}